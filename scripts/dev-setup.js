#!/usr/bin/env node

import { writeFileSync, readFileSync, existsSync } from 'fs';
import { join } from 'path';
import { execSync } from 'child_process';

const frontendDir = join(process.cwd(), 'frontend');
const envPath = join(frontendDir, '.env');
const envDevPath = join(frontendDir, '.env.development');
const envProdPath = join(frontendDir, '.env.production');

function getFirebaseConfig() {
  try {
    console.log('üî• Getting Firebase configuration from CLI...');
    const output = execSync('firebase apps:sdkconfig web 1:688947753281:web:519d452fdd5c646d00b1c0', { encoding: 'utf8' });
    const configMatch = output.match(/\{[\s\S]*\}/);
    if (configMatch) {
      const config = JSON.parse(configMatch[0]);
      return config;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è  Could not get Firebase config from CLI, using default values');
    console.warn('Make sure you are logged in to Firebase CLI: firebase login');
  }

  // Fallback to known configuration
  return {
    projectId: "ai-workout-backend-2024",
    appId: "1:688947753281:web:519d452fdd5c646d00b1c0",
    storageBucket: "ai-workout-backend-2024.firebasestorage.app",
    apiKey: "AIzaSyA7RNNf6DVSc3ia9ynI2I7Wcsfl6R8LB_E",
    authDomain: "ai-workout-backend-2024.firebaseapp.com",
    messagingSenderId: "688947753281"
  };
}

function createEnvFile(mode) {
  const isProduction = mode === 'production';
  const apiUrl = isProduction
    ? 'https://ai-workout-backend-2024.web.app'
    : 'http://localhost:3000';

  const firebaseConfig = getFirebaseConfig();

  const envContent = `# ${mode.toUpperCase()} environment configuration
# Auto-generated by dev-setup.js with Firebase CLI configuration

# API Configuration
VITE_API_BASE_URL=${apiUrl}

# Firebase Configuration
VITE_FIREBASE_API_KEY=${firebaseConfig.apiKey}
VITE_FIREBASE_AUTH_DOMAIN=${firebaseConfig.authDomain}
VITE_FIREBASE_PROJECT_ID=${firebaseConfig.projectId}
VITE_FIREBASE_STORAGE_BUCKET=${firebaseConfig.storageBucket}
VITE_FIREBASE_MESSAGING_SENDER_ID=${firebaseConfig.messagingSenderId}
VITE_FIREBASE_APP_ID=${firebaseConfig.appId}
`;

  writeFileSync(envPath, envContent);
  console.log(`‚úÖ Created .env file for ${mode} mode`);
  console.log(`üì° API URL: ${apiUrl}`);
  console.log(`üî• Firebase Project: ${firebaseConfig.projectId}`);

  if (mode === 'development') {
    console.log(`üöÄ Make sure your backend is running locally: npm run dev`);
    console.log(`üåê Frontend will connect to localhost:3000`);
  } else {
    console.log(`üåê Frontend will connect to production API`);
  }
}

const mode = process.argv[2];

if (!mode || !['development', 'production'].includes(mode)) {
  console.log('Usage: node scripts/dev-setup.js [development|production]');
  console.log('');
  console.log('Examples:');
  console.log('  node scripts/dev-setup.js development  # Use localhost backend');
  console.log('  node scripts/dev-setup.js production   # Use production backend');
  process.exit(1);
}

createEnvFile(mode);

console.log('');
console.log('‚ö†Ô∏è  IMPORTANT: You need to add your Firebase configuration values to the .env file');
console.log('   Check your Firebase project settings for the actual values.');
console.log('');
console.log('Next steps:');
console.log('1. Add Firebase config values to frontend/.env');
console.log('2. cd frontend && npm run dev');
if (mode === 'development') {
  console.log('3. Make sure backend is running: npm run dev (in root directory)');
}
