rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUser() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }

    function isAdmin() {
      return isAuthenticated() &&
             request.auth.token.email in ['sal.scrudato@gmail.com']; // Add admin emails here
    }

    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin(); // Admins can read all users
    }

    // Profiles collection - users can only access their own profile
    match /profiles/{profileId} {
      allow read, write: if isAuthenticated() &&
                           resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                    request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all profiles
    }

    // Equipment collection - read-only for all authenticated users
    match /equipment/{equipmentId} {
      allow read: if isValidUser();
      allow write: if isAdmin(); // Only admins can modify equipment
    }

    // Workout plans - users can only access their own workout plans
    match /workoutPlans/{planId} {
      allow read, write: if isAuthenticated() &&
                           resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                    request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all workout plans
    }

    // Workout sessions - users can only access their own sessions
    match /workoutSessions/{sessionId} {
      allow read, write: if isAuthenticated() &&
                           resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                    request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all sessions
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
